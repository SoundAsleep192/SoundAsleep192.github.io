const rotate = str => str // объявление функции rotate, которая принимает как аргумент строку (str) 
.split('')                // и разбивает ее на отдельные буквы и кладет в массив
.map(                     // затем к каждому элементу массива применяется функция
  chr => {                // принимающая символ в качестве аргумента
    let middleValue;      // объявляется переменная для среднего значения
    let range;            // объявляется переменная для количества символов в конкретном охвате значений
    const chrScope = [[48, 57], [65, 90], [97, 122], [1040, 1071], [1072, 1103]]; // объявляется константа охватов кодов unicode-символов, с которыми
                                                                                  // может работать программа. Если добавить сюда другие диапазоны значений, 
                                                                                  // то программа сможет работать и с ними.
    const chrCode = chr.charCodeAt(0); // из символа выводится его unicode значение и помещается в переменную chrCode
    chrScope.map(                      // к каждому охвату значений применяется функция
      ([start, end]) => {              // принимающая охват значений в виде [начало, конец]
        if (chrCode >= start && chrCode <= end) { // если unicode-значение символа попадает в выбранный охват значений
          range = end - start;                    // выводится количество символов в данном охвате
          middleValue = Math.floor(end - range / 2); // и выводится медиана охвата
        }
      }
    );
    return middleValue && range // если были найдены медиана и количество символов в данном охвате, 
      ? String.fromCharCode(chrCode + (chrCode <= middleValue ? Math.ceil(range / 2) : -Math.ceil(range / 2))) // вернуть символ, выведенный из кода исходного символа, сдвинутый
                                                                                                               // наплюс/минус половину количества символов в данном
                                                                                                               // диапазонев зависимости от того, находится ли исходный
                                                                                                               // символ в первой или второй половине диапазона 
      : chr; // иначе, вернуть исходный символ
  }).join(''); // собрать все полученные символы снова в строку в исходном порядке
  document.getElementById('cipher_button').addEventListener('click', () => { // добавление событий клика к элементам интерфейса
    let text = document.getElementById('text').value; // получение значения из пользовательского ввода в поле на странице
    document.getElementById('result').value = rotate(text); // применение вышеописанной функции к данному пользовательскому вводу и вывод его в поле результата
  })